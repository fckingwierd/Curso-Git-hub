ESC, SHIFT, ZZ
cd = Te dirige a la carpeta que escribas.
cd .. = Te dirige a la carpeta anterior
mkdir = crea nueva carpeta
touch: crea archivos vacios
cat: Permite ver contenido de carpeta
history: permite ver todos los comandos puestos.
puedo llamar a un comando poniendo el numero del comando:!72
git remote -v = 
rm: borra archivos
git init = nos ingresa a master
git add *nombre del archivo* = lo agrega a la memoria de la rama
git commit -m "mensaje" = lo agrega a a la version final
git show *nombre del archivo* = muestra todos los cambios
git log *nombre del archivo* = muestra los cambios
git diff = Muestra la diferencia entre commits
git log --stat = permite ver todos los cambios hechos a profundidad
git checkout *numero* *nombre del archivo* = permite ver esa version en particular.
git checkout = se cambia a la otra rama
git checkout master *nombre del archivo* = lo regresa a la normalidad.
git reset *numero* --soft: Resetea todohasta esa version, pero con los cambios en el
repositorio.
git reset *numero* --hard: Borra absulamente todo de hasta esa version.
git rm --cached *nombre del archivo* = elimina los archivos del repositorio pero los deja
en el discod duro
git --force *nombre*: elimina los archivos de el repositorio y el disco duro.
git reset HEAD: Mueve los archivos del repositorio, pero con los cambios del ultimo
commit.
git branch *nombre* = crea una rama desde el ultimo commit.
git commit -am *mensaje* = git add + commit.
git merge *nombre de la rama* = fuciona la rama con master.
gitk = MUESTRA DE FORMA VISUAL TODA LA HISTORIA DE LAS RAMAS
git rebase master = pega una rama a la rama master, y nos actualiza con su ultimo commit.
carpeta: .gitignore = ignora las carpetas que quieras al hacer commits
git stash = cuando haces un cambio que no querias, y no te acuerdas que iba, pones este comando
el cual te permite volver al estado inicial del commit, guardando este cambio temporal, el cual
tienes que desactivar con git stash pop.
git stash pop = vuelve al estado el cual hiciste tu error, pudiendo ya corregirlo con 
control Z, o directamente viendo que error cometiste
git stash list = muestra todos los stash
git stash branch *nombre de la rama* = guarda los cambios que hiciste en ese stash
temporal en otra rama.
git stash drop = borra el stash temporal
git clean --dry-run = muesta los archivos que se pueden borrar
git clean -f = borra los archivos que estan en el staying, y que probablemente los hayas creado por error
git cherry-pick *numero del commit" = sirve para recoger un commit viejo de una rama en la cual quieras seguir desarrollando, pero no quieras hacer un merge.
git log --all = se ven todos los commits
git log --all --graph = con graficos
git log --all --graph --decorate --oneline = Compridamente, en una sola linea.
alias ""="nombre del comando" = Permite insertar un nombre para comandos largos
git tag -a "nombre del tag" -m "descripcion" "codigo del commit" = permite crear un tag-
git tag = permite ver todos los tags.
git show-ref --tag = permite relacionar la version del commit con el tag correspondiente
git push origin --tags = envia los tags a la web
git tag -d "nombre del tag" = borra tags solo en git.
git push origin :refs/tags/dormido = borra los tags incluido en la web
git show-branch = historia de las ramas
git show-branch --all = historia mas detallada de las ramas
git branch -d *nombre de rama* = borra una rama local
git push origin :*nombre de rama* = borra una rama remotamente
git commit --amend = vuelve a hacer el commit anterior pero con los cambios que hayas hecho en el repositorio. Remendas si es que te olvidaste de configurar algo
git grep *lo que quieras* = busca ese tipo de variable en tus archivos
git grep -n o -c = busca en las lineas, y cuantas veces aparece en tus archivos, respectivamente.
git log -S "palabra que quieras buscar" = para buscar entre los commits palabras.
git shortlog = permite ver quien hizo cada comits
git shortlog -sn --all --no-merges = permite ver mas especificamente, con no merges.
git config --global alias.*nombre de tu alias* "codigo" = permite poner un alias el cual funcione en toda tu maquina, permanentemente.
git branch -a = muestra las ramas locales y remotas
git blame *nombre del archivo* = permite ver quien hizo cambios en ese archivo
git blame *nombre del archivo* -L21,12  = permite ver de una linea a otra
-------------------------------------------------------------------------------------------
git remote add origin = Nos conecta con la Url en github de tu proyecto
git push origin master = le damos todos nuestros archivos en nuestro proyecto en github
git pull origin master --allow-unrelated-histories = Nos permite traer historias desde github.
git pull origin master = nos trae todos los archivos 
git remote set-url origin "codigo ssh" = conecta la llave publica con github
fork = clona el proyecto en github
-------------------------------------------
LLAVES PUBLICAS -PRIVADAS = CREACION
ssh-keygen -t rsa -b 4096 -C "CORREO" 
eval $(ssh-agent -s)
ssh-add ~/.ssh/id_rsa
-------------------------------------------
NUNCA HACER UN CHECKOUT EN CUALQUIER RAMA O EN EL MASTER SIN HACER UN COMMIT ANTES